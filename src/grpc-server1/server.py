import grpc
from concurrent import futures
import time

# Import the code generated by protobuf
import order_pb2
import order_pb2_grpc


# Implements the service defined in .proto
class OrderServiceServicer(order_pb2_grpc.OrderServiceServicer):
    def SubmitOrder(self, request, context):
        # Simulate the logic to process the order
        print(f"Receive a request from {request.customer_id}")
        for item in request.items:
            print(f"Product ID: {item.product_id}, Quantity: {item.quantity}, Price: {round(item.price,2)}")

        # Returns the product confirmation
        return order_pb2.OrderConfirmation(
            confirmation_id="ConfirmationID_1",
            message="Request received successfully"
        )


# Initialize the gRPC server
def serve():
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    order_pb2_grpc.add_OrderServiceServicer_to_server(OrderServiceServicer(), server)

    print("Server gRPC runing on port 50051...")
    server.add_insecure_port('[::]:50051')
    server.start()

    try:
        while True:
            time.sleep(86400)  # To maintain the server running
    except KeyboardInterrupt:
        server.stop(0)


if __name__ == '__main__':
    serve()
